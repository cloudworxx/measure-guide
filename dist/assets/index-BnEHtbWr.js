import{i as l,R as d}from"./core-Cfh-QHsP.js";var f;(function(n){n[n.Audio=1]="Audio",n[n.Cache=2]="Cache",n[n.Config=3]="Config",n[n.Data=4]="Data",n[n.LocalData=5]="LocalData",n[n.Document=6]="Document",n[n.Download=7]="Download",n[n.Picture=8]="Picture",n[n.Public=9]="Public",n[n.Video=10]="Video",n[n.Resource=11]="Resource",n[n.Temp=12]="Temp",n[n.AppConfig=13]="AppConfig",n[n.AppData=14]="AppData",n[n.AppLocalData=15]="AppLocalData",n[n.AppCache=16]="AppCache",n[n.AppLog=17]="AppLog",n[n.Desktop=18]="Desktop",n[n.Executable=19]="Executable",n[n.Font=20]="Font",n[n.Home=21]="Home",n[n.Runtime=22]="Runtime",n[n.Template=23]="Template"})(f||(f={}));var u;(function(n){n[n.Start=0]="Start",n[n.Current=1]="Current",n[n.End=2]="End"})(u||(u={}));function c(n){return{isFile:n.isFile,isDirectory:n.isDirectory,isSymlink:n.isSymlink,size:n.size,mtime:n.mtime!==null?new Date(n.mtime):null,atime:n.atime!==null?new Date(n.atime):null,birthtime:n.birthtime!==null?new Date(n.birthtime):null,readonly:n.readonly,fileAttributes:n.fileAttributes,dev:n.dev,ino:n.ino,mode:n.mode,nlink:n.nlink,uid:n.uid,gid:n.gid,rdev:n.rdev,blksize:n.blksize,blocks:n.blocks}}function r(n){const t=new Uint8ClampedArray(n),e=t.byteLength;let i=0;for(let o=0;o<e;o++){const a=t[o];i*=256,i+=a}return i}class w extends d{async read(t){if(t.byteLength===0)return 0;const e=await l("plugin:fs|read",{rid:this.rid,len:t.byteLength}),i=r(e.slice(-8)),o=e instanceof ArrayBuffer?new Uint8Array(e):e;return t.set(o.slice(0,o.length-8)),i===0?null:i}async seek(t,e){return await l("plugin:fs|seek",{rid:this.rid,offset:t,whence:e})}async stat(){const t=await l("plugin:fs|fstat",{rid:this.rid});return c(t)}async truncate(t){await l("plugin:fs|ftruncate",{rid:this.rid,len:t})}async write(t){return await l("plugin:fs|write",{rid:this.rid,data:t})}}async function p(n,t){if(n instanceof URL&&n.protocol!=="file:")throw new TypeError("Must be a file URL.");const e=await l("plugin:fs|open",{path:n instanceof URL?n.toString():n,options:t});return new w(e)}async function g(n,t){if(n instanceof URL&&n.protocol!=="file:")throw new TypeError("Must be a file URL.");const e=await l("plugin:fs|read_file",{path:n instanceof URL?n.toString():n,options:t});return e instanceof ArrayBuffer?new Uint8Array(e):Uint8Array.from(e)}async function b(n,t){if(n instanceof URL&&n.protocol!=="file:")throw new TypeError("Must be a file URL.");const e=await l("plugin:fs|read_text_file",{path:n instanceof URL?n.toString():n,options:t}),i=e instanceof ArrayBuffer?e:Uint8Array.from(e);return new TextDecoder().decode(i)}async function L(n,t,e){if(n instanceof URL&&n.protocol!=="file:")throw new TypeError("Must be a file URL.");if(t instanceof ReadableStream){const i=await p(n,{read:!1,create:!0,write:!0,...e}),o=t.getReader();try{for(;;){const{done:a,value:s}=await o.read();if(a)break;await i.write(s)}}finally{o.releaseLock(),await i.close()}}else await l("plugin:fs|write_file",t,{headers:{path:encodeURIComponent(n instanceof URL?n.toString():n),options:JSON.stringify(e)}})}async function R(n,t,e){if(n instanceof URL&&n.protocol!=="file:")throw new TypeError("Must be a file URL.");const i=new TextEncoder;await l("plugin:fs|write_text_file",i.encode(t),{headers:{path:encodeURIComponent(n instanceof URL?n.toString():n),options:JSON.stringify(e)}})}export{f as BaseDirectory,w as FileHandle,u as SeekMode,p as open,g as readFile,b as readTextFile,L as writeFile,R as writeTextFile};
